import { computed } from "vue";
import { m as merge_1, s as startCase_1 } from "../../../../vendor.js";
const buildTableColumn = (source, initialIndex) => {
  const input = typeof source === "string" ? { key: source } : source;
  return {
    source,
    initialIndex,
    key: input.key,
    name: input.name || input.key,
    label: input.label || startCase_1(input.key),
    thTitle: input.thTitle || input.headerTitle || input.label || startCase_1(input.key),
    sortable: input.sortable || false,
    sortingFn: input.sortingFn,
    thAlign: input.thAlign || input.alignHead || "left",
    thVerticalAlign: input.thVerticalAlign || input.verticalAlignHead || "middle",
    tdAlign: input.tdAlign || input.align || "left",
    tdVerticalAlign: input.tdVerticalAlign || input.verticalAlign || "middle",
    width: input.width,
    tdClass: input.tdClass || input.classes,
    thClass: input.thClass || input.headerClasses,
    tdStyle: input.tdStyle || input.style,
    thStyle: input.thStyle || input.headerStyle
  };
};
const buildColumnsFromItems = (items) => {
  return Object.keys(merge_1({}, ...items)).map(buildTableColumn);
};
const buildNormalizedColumns = (columns) => {
  return columns.map(buildTableColumn);
};
function useColumns(props) {
  const columnsComputed = computed(() => {
    if (props.columns.length === 0) {
      return buildColumnsFromItems(props.items);
    } else {
      return buildNormalizedColumns(props.columns);
    }
  });
  return {
    columnsComputed
  };
}
export { useColumns as u };
//# sourceMappingURL=useColumns.js.map
