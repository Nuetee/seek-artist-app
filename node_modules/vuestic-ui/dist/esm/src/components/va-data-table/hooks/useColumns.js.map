{"version":3,"file":"useColumns.js","sources":["../../../../../../src/components/va-data-table/hooks/useColumns.ts"],"sourcesContent":["import { computed } from 'vue'\nimport startCase from 'lodash/startCase.js'\nimport merge from 'lodash/merge.js'\n\nimport { DataTableColumnSource, DataTableColumnInternal, DataTableItem } from '../types'\n\ninterface useColumnsProps {\n  columns: DataTableColumnSource[]\n  items: DataTableItem[]\n  [prop: string]: unknown\n}\n\nexport const buildTableColumn = (source: DataTableColumnSource, initialIndex: number): DataTableColumnInternal => {\n  const input = typeof source === 'string' ? { key: source } : source\n\n  return {\n    source,\n    initialIndex,\n    key: input.key,\n    name: input.name || input.key,\n    label: input.label || startCase(input.key),\n    thTitle: input.thTitle || input.headerTitle || input.label || startCase(input.key),\n    sortable: input.sortable || false,\n    sortingFn: input.sortingFn,\n    thAlign: input.thAlign || input.alignHead || 'left',\n    thVerticalAlign: input.thVerticalAlign || input.verticalAlignHead || 'middle',\n    tdAlign: input.tdAlign || input.align || 'left',\n    tdVerticalAlign: input.tdVerticalAlign || input.verticalAlign || 'middle',\n    width: input.width,\n    tdClass: input.tdClass || input.classes,\n    thClass: input.thClass || input.headerClasses,\n    tdStyle: input.tdStyle || input.style,\n    thStyle: input.thStyle || input.headerStyle,\n  }\n}\n\nconst buildColumnsFromItems = (items: DataTableItem[]) => {\n  return Object.keys(merge({}, ...items)).map(buildTableColumn)\n}\n\nconst buildNormalizedColumns = (columns: DataTableColumnSource[]) => {\n  return columns.map(buildTableColumn)\n}\n\nexport default function useColumns (props: useColumnsProps) {\n  const columnsComputed = computed(() => {\n    if (props.columns.length === 0) {\n      // if no column definitions provided then build them based on provided rawItems\n      // e.g. if provided items look like `[{a: 1}, {b: 2}]` then there should be 2 columns: A and B\n      return buildColumnsFromItems(props.items)\n    } else {\n      return buildNormalizedColumns(props.columns)\n    }\n  })\n\n  return {\n    columnsComputed,\n  }\n}\n"],"names":["startCase","merge"],"mappings":";;AAYa,MAAA,mBAAmB,CAAC,QAA+B,iBAAkD;AAChH,QAAM,QAAQ,OAAO,WAAW,WAAW,EAAE,KAAK,OAAW,IAAA;AAEtD,SAAA;AAAA,IACL;AAAA,IACA;AAAA,IACA,KAAK,MAAM;AAAA,IACX,MAAM,MAAM,QAAQ,MAAM;AAAA,IAC1B,OAAO,MAAM,SAASA,YAAU,MAAM,GAAG;AAAA,IACzC,SAAS,MAAM,WAAW,MAAM,eAAe,MAAM,SAASA,YAAU,MAAM,GAAG;AAAA,IACjF,UAAU,MAAM,YAAY;AAAA,IAC5B,WAAW,MAAM;AAAA,IACjB,SAAS,MAAM,WAAW,MAAM,aAAa;AAAA,IAC7C,iBAAiB,MAAM,mBAAmB,MAAM,qBAAqB;AAAA,IACrE,SAAS,MAAM,WAAW,MAAM,SAAS;AAAA,IACzC,iBAAiB,MAAM,mBAAmB,MAAM,iBAAiB;AAAA,IACjE,OAAO,MAAM;AAAA,IACb,SAAS,MAAM,WAAW,MAAM;AAAA,IAChC,SAAS,MAAM,WAAW,MAAM;AAAA,IAChC,SAAS,MAAM,WAAW,MAAM;AAAA,IAChC,SAAS,MAAM,WAAW,MAAM;AAAA,EAAA;AAEpC;AAEA,MAAM,wBAAwB,CAAC,UAA2B;AACjD,SAAA,OAAO,KAAKC,QAAM,CAAC,GAAG,GAAG,KAAK,CAAC,EAAE,IAAI,gBAAgB;AAC9D;AAEA,MAAM,yBAAyB,CAAC,YAAqC;AAC5D,SAAA,QAAQ,IAAI,gBAAgB;AACrC;AAEA,oBAAoC,OAAwB;AACpD,QAAA,kBAAkB,SAAS,MAAM;AACjC,QAAA,MAAM,QAAQ,WAAW,GAAG;AAGvB,aAAA,sBAAsB,MAAM,KAAK;AAAA,IAAA,OACnC;AACE,aAAA,uBAAuB,MAAM,OAAO;AAAA,IAC7C;AAAA,EAAA,CACD;AAEM,SAAA;AAAA,IACL;AAAA,EAAA;AAEJ;;"}