var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
import { defineComponent, shallowRef, computed, toRef, openBlock, createElementBlock, normalizeClass, createElementVNode, renderSlot, createBlock, Teleport, withModifiers, createCommentVNode } from "vue";
import { p as pick_1 } from "../../../vendor.js";
import { g as generateUniqueId } from "../../services/utils.js";
import { u as useBem } from "../../composables/useBem.js";
import { u as useClickOutside } from "../../composables/useClickOutside.js";
import "colortranslator";
import { u as useDebounceFn } from "../../composables/useDebounce.js";
import { p as placementsPositions, u as usePopover } from "../../composables/usePopover.js";
import { a as useStatefulProps, u as useStatefulEmits, b as useStateful } from "../../composables/useStateful.js";
import { _ as _export_sfc } from "../../../plugin-vue_export-helper.js";
var VaDropdown_vue_vue_type_style_index_0_lang = "";
const _sfc_main = defineComponent({
  name: "VaDropdown",
  props: __spreadProps(__spreadValues({}, useStatefulProps), {
    stateful: { default: true },
    modelValue: { type: Boolean, default: false },
    disabled: { type: Boolean },
    readonly: { type: Boolean },
    anchorSelector: { type: String, default: "" },
    attachElement: { type: String, default: "body" },
    disableAttachment: { type: Boolean, default: false },
    keepAnchorWidth: { type: Boolean, default: false },
    isContentHoverable: { type: Boolean, default: true },
    closeOnContentClick: { type: Boolean, default: true },
    closeOnClickOutside: { type: Boolean, default: true },
    closeOnAnchorClick: { type: Boolean, default: true },
    hoverOverTimeout: { type: Number, default: 30 },
    hoverOutTimeout: { type: Number, default: 200 },
    offset: { type: [Array, Number], default: 0 },
    trigger: {
      type: String,
      default: "click",
      validator: (value) => ["click", "hover", "none"].includes(value)
    },
    placement: {
      type: String,
      default: "bottom",
      validator: (value) => placementsPositions.includes(value)
    }
  }),
  emits: [...useStatefulEmits, "anchor-click", "dropdown-content-click", "click-outside"],
  setup(props, { emit }) {
    const anchorRef = shallowRef();
    const contentRef = shallowRef();
    const { valueComputed: statefulVal } = useStateful(props, emit);
    const valueComputed = computed({
      get: () => statefulVal.value && !props.disabled && !props.readonly,
      set(val) {
        statefulVal.value = val;
      }
    });
    const computedClass = useBem("va-dropdown", () => pick_1(props, ["disabled"]));
    const computedAnchorRef = computed(() => anchorRef.value && props.anchorSelector ? anchorRef.value.querySelector(props.anchorSelector) || anchorRef.value : anchorRef.value);
    usePopover(computedAnchorRef, contentRef, computed(() => ({
      placement: props.placement,
      keepAnchorWidth: props.keepAnchorWidth,
      offset: props.offset,
      stickToEdges: true,
      autoPlacement: true,
      root: props.attachElement
    })));
    const { debounced: debounceHover, cancel: cancelHoverDebounce } = useDebounceFn(toRef(props, "hoverOverTimeout"));
    const onMouseEnter = () => {
      if (props.trigger !== "hover" || props.disabled) {
        return;
      }
      debounceHover(() => {
        valueComputed.value = true;
      });
      cancelUnHoverDebounce();
    };
    const { debounced: debounceUnHover, cancel: cancelUnHoverDebounce } = useDebounceFn(toRef(props, "hoverOutTimeout"));
    const onMouseLeave = () => {
      if (props.trigger !== "hover" || props.disabled) {
        return;
      }
      if (props.isContentHoverable) {
        debounceUnHover(() => {
          valueComputed.value = false;
        });
      } else {
        valueComputed.value = false;
      }
      cancelHoverDebounce();
    };
    const emitAndClose = (eventName, close) => {
      emit(eventName);
      if (close) {
        valueComputed.value = false;
      }
    };
    const onAnchorClick = () => {
      if (props.trigger !== "click" || props.disabled) {
        return;
      }
      if (valueComputed.value) {
        emitAndClose("anchor-click", props.closeOnAnchorClick);
      } else {
        valueComputed.value = true;
        emit("anchor-click");
      }
    };
    useClickOutside([anchorRef, contentRef], () => {
      if (props.closeOnClickOutside && valueComputed.value) {
        emitAndClose("click-outside", props.closeOnClickOutside);
      }
    });
    const idComputed = computed(generateUniqueId);
    return {
      valueComputed,
      anchorRef,
      contentRef,
      computedClass,
      emitAndClose,
      onAnchorClick,
      onMouseEnter,
      onMouseLeave,
      idComputed
    };
  }
});
const _hoisted_1 = ["aria-disabled", "aria-expanded", "aria-controls"];
const _hoisted_2 = ["id"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(["va-dropdown", _ctx.computedClass])
  }, [
    createElementVNode("div", {
      ref: "anchorRef",
      class: "va-dropdown__anchor",
      role: "button",
      "aria-label": "toggle dropdown",
      "aria-disabled": _ctx.$props.disabled,
      "aria-expanded": !!_ctx.valueComputed,
      "aria-controls": _ctx.idComputed,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onAnchorClick && _ctx.onAnchorClick(...args)),
      onMouseenter: _cache[1] || (_cache[1] = (...args) => _ctx.onMouseEnter && _ctx.onMouseEnter(...args)),
      onMouseleave: _cache[2] || (_cache[2] = (...args) => _ctx.onMouseLeave && _ctx.onMouseLeave(...args))
    }, [
      renderSlot(_ctx.$slots, "anchor")
    ], 40, _hoisted_1),
    _ctx.valueComputed ? (openBlock(), createBlock(Teleport, {
      key: 0,
      to: _ctx.attachElement,
      disabled: _ctx.disableAttachment
    }, [
      createElementVNode("div", {
        ref: "contentRef",
        class: "va-dropdown__content-wrapper",
        id: _ctx.idComputed,
        onMouseover: _cache[3] || (_cache[3] = ($event) => _ctx.$props.isContentHoverable && _ctx.onMouseEnter()),
        onMouseout: _cache[4] || (_cache[4] = (...args) => _ctx.onMouseLeave && _ctx.onMouseLeave(...args)),
        onClick: _cache[5] || (_cache[5] = withModifiers(($event) => _ctx.emitAndClose("dropdown-content-click", _ctx.closeOnContentClick), ["stop"]))
      }, [
        renderSlot(_ctx.$slots, "default")
      ], 40, _hoisted_2)
    ], 8, ["to", "disabled"])) : createCommentVNode("", true)
  ], 2);
}
var _VaDropdown = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { _VaDropdown as _ };
//# sourceMappingURL=VaDropdown.js.map

 import './VaDropdown.css'