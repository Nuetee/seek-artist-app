{"version":3,"file":"useColumns.mjs","sources":["../../../../../../src/components/va-data-table/hooks/useColumns.ts"],"sourcesContent":["import { computed } from 'vue'\nimport startCase from 'lodash/startCase.js'\nimport merge from 'lodash/merge.js'\n\nimport { DataTableColumnSource, DataTableColumnInternal, DataTableItem } from '../types'\n\ninterface useColumnsProps {\n  columns: DataTableColumnSource[]\n  items: DataTableItem[]\n  [prop: string]: unknown\n}\n\nexport const buildTableColumn = (source: DataTableColumnSource, initialIndex: number): DataTableColumnInternal => {\n  const input = typeof source === 'string' ? { key: source } : source\n\n  return {\n    source,\n    initialIndex,\n    key: input.key,\n    name: input.name || input.key,\n    label: input.label || startCase(input.key),\n    thTitle: input.thTitle || input.headerTitle || input.label || startCase(input.key),\n    sortable: input.sortable || false,\n    sortingFn: input.sortingFn,\n    thAlign: input.thAlign || input.alignHead || 'left',\n    thVerticalAlign: input.thVerticalAlign || input.verticalAlignHead || 'middle',\n    tdAlign: input.tdAlign || input.align || 'left',\n    tdVerticalAlign: input.tdVerticalAlign || input.verticalAlign || 'middle',\n    width: input.width,\n    tdClass: input.tdClass || input.classes,\n    thClass: input.thClass || input.headerClasses,\n    tdStyle: input.tdStyle || input.style,\n    thStyle: input.thStyle || input.headerStyle,\n  }\n}\n\nconst buildColumnsFromItems = (items: DataTableItem[]) => {\n  return Object.keys(merge({}, ...items)).map(buildTableColumn)\n}\n\nconst buildNormalizedColumns = (columns: DataTableColumnSource[]) => {\n  return columns.map(buildTableColumn)\n}\n\nexport default function useColumns (props: useColumnsProps) {\n  const columnsComputed = computed(() => {\n    if (props.columns.length === 0) {\n      // if no column definitions provided then build them based on provided rawItems\n      // e.g. if provided items look like `[{a: 1}, {b: 2}]` then there should be 2 columns: A and B\n      return buildColumnsFromItems(props.items)\n    } else {\n      return buildNormalizedColumns(props.columns)\n    }\n  })\n\n  return {\n    columnsComputed,\n  }\n}\n"],"names":["buildTableColumn","source","initialIndex","input","key","name","label","startCase","thTitle","headerTitle","sortable","sortingFn","thAlign","alignHead","thVerticalAlign","verticalAlignHead","tdAlign","align","tdVerticalAlign","verticalAlign","width","tdClass","classes","thClass","headerClasses","tdStyle","style","thStyle","headerStyle","useColumns","props","columnsComputed","computed","columns","length","items","Object","keys","merge","map"],"mappings":"iFAYa,MAAAA,iBAAmB,CAACC,EAA+BC,KAC9D,MAAMC,EAA0B,iBAAXF,EAAsB,CAAEG,IAAKH,GAAWA,EAEtD,MAAA,CACLA,OAAAA,EACAC,aAAAA,EACAE,IAAKD,EAAMC,IACXC,KAAMF,EAAME,MAAQF,EAAMC,IAC1BE,MAAOH,EAAMG,OAASC,EAAUJ,EAAMC,KACtCI,QAASL,EAAMK,SAAWL,EAAMM,aAAeN,EAAMG,OAASC,EAAUJ,EAAMC,KAC9EM,SAAUP,EAAMO,WAAY,EAC5BC,UAAWR,EAAMQ,UACjBC,QAAST,EAAMS,SAAWT,EAAMU,WAAa,OAC7CC,gBAAiBX,EAAMW,iBAAmBX,EAAMY,mBAAqB,SACrEC,QAASb,EAAMa,SAAWb,EAAMc,OAAS,OACzCC,gBAAiBf,EAAMe,iBAAmBf,EAAMgB,eAAiB,SACjEC,MAAOjB,EAAMiB,MACbC,QAASlB,EAAMkB,SAAWlB,EAAMmB,QAChCC,QAASpB,EAAMoB,SAAWpB,EAAMqB,cAChCC,QAAStB,EAAMsB,SAAWtB,EAAMuB,MAChCC,QAASxB,EAAMwB,SAAWxB,EAAMyB,cAYpC,SAAAC,WAAoCC,GAW3B,MAAA,CACLC,gBAXsBC,GAAS,KAC3B,OAAyB,IAAzBF,EAAMG,QAAQC,QAVSC,EAaIL,EAAMK,MAZhCC,OAAOC,KAAKC,EAAM,MAAOH,IAAQI,IAAIvC,mBAcV8B,EAAMG,QAVzBM,IAAIvC,kBADU,IAJAmC"}